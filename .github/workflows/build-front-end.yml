on:
  workflow_call:
    inputs:
      distribution:
        type: string
        description: The ID of the CloudFront distribution.
        required: true
      origin-id:
        type: string
        description: The ID of the Blue/Green Origin
      origin-domains:
        type: string
        description: |
          A multi-line string containing the URIs of the Origin DomainNames
          corresponding to the green or blue state of the distribution.
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - uses: borales/actions-yarn@v4
        with:
          cmd: install
          dir: front-end/
      - uses: borales/actions-yarn@v4
        with:
          cmd: build
          dir: front-end/
      - uses: actions/upload-artifact@v3
        with:
          name: front-end
          path: front-end/dist/
  publish:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::391739045280:role/Github-CI+CD-Deployment-Role
          aws-region: us-west-2
      - uses: actions/download-artifact@v3
        with:
          name: front-end
          path: front-end/dist/
      - id: status
        run: |
          export DISTRIBUTION_QUERY=$(cat <<- EOF
            Distribution.{
              Status: Status,
              BlueGreenOrigin: DistributionConfig.
                Origins.
                  Items[?Id==\`${{ inputs.origin-id }}\`] | [0].DomainName
            }
          EOF
          );

          DISTRIBUTION=$(
            aws cloudfront get-distribution   \
            --id "${{ inputs.distribution }}" \
            --query "${DISTRIBUTION_QUERY}"
          )

          echo "${DISTRIBUTION}"

          DISTRIBUTION_STATUS=$(echo "${DISTRIBUTION}" | jq '.Status')
          DISTRIBUTION_ORIGIN=$(echo "${DISTRIBUTION}" | jq '.BlueGreenOrigin')
          DISTRIBUTION_BLUE_GREEN_STATUS=$(echo "${{ inputs.origin-domains }} | grep "${DISTRIBUTION_ORIGIN}" )

          echo "distribution-state=${DISTRIBUTION_STATUS}" >> $GITHUB_OUTPUT
          echo "distribution-origin-status=${DISTRIBUTION_BLUE_GREEN_STATUS}" >> $GITHUB_OUTPUT
      - if: ${{ steps.status.distribution-state != 'Deployed'}}
        run: |
          echo "Bailing because a distribution deployment is happening"
          /bin/false
      
    





