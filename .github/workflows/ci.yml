name: CI
on:
  push:
jobs:
  lint:
    if: ${{ 1 == 2 }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast:  false
      matrix: 
        linter: ["ruff", "black", "prettier"]
    name: ${{ matrix.linter }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/mega-lint
        with:
          linter: ${{ matrix.linter }}
          action: check
  format:
    if: ${{ 1 == 2 }}
    uses: ./.github/workflows/format.yml
    secrets: inherit
    permissions:
      contents: write
  test:
    if: ${{ 1 == 2 }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        suite: 
          - name: python
            cache:
              path: .venv
              hash-pattern: "**/poetry.lock"
          - name: node
            cache:
              path: .front-end/node_modules/
              hash-pattern: "**/yarn.lock"
    name: ${{ matrix.suite.name }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/test-runner
        with:
          suite: ${{ matrix.suite.name }}
          cache-path: ${{ matrix.suite.cache.path }}
          cache-hash-pattern: ${{ matrix.suite.cache.hash-pattern }}
  prepare-build:
    runs-on: ubuntu-latest
    outputs:
      base-image: builder
    steps:
      - uses: actions/checkout@v3
      - id: base-images
        uses: ./.github/actions/build-docker-image
        with:
          target: builder
  build:
    if: ${{ always() && !failure('format') && !failure('test') && !failure('lint') }}
    needs: [prepare-build, format, test, lint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        artifact:
          - name: front-end
            kind: yarn
#          - name: api
#            kind: docker
#          - name: bit-runner
#            kind: docker
#          - name: task-scheduler
#            kind: docker
    name: ${{ matrix.artifact.name }}
    permissions:
      id-token: write

    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::391739045280:role/Github-CI+CD-Deployment-Role
          aws-region: us-west-2
      - if: ${{ matrix.artifact.kind == 'docker' }}
        uses: ./.github/actions/build-docker-image
        with:
          target: ${{ matrix.artifact.name }}
          base-image: ${{ needs.prepare-build.outputs.base-image }}
          latest-tag: ${{ github.branch == 'main' && 'latest' || format('staging_pr_{0}', github.run_id) }}
          repo: act-test
          registry: 391739045280.dkr.ecr.us-west-2.amazonaws.com
          push: true
      - if: ${{ matrix.artifact.kind == 'yarn' }}
        uses: ./.github/actions/build-yarn-bundle
        with:
          target: ${{ matrix.artifact.name }}
          dir: front-end/
  deploy:
    needs: [build]
    if: ${{ always() && !failure('build') }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    strategy:
      matrix:
        service:
          - front-end
          - api
          - scheduler
    name: ${{ strategy.matrix.service }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: 3.11
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::391739045280:role/Github-CI+CD-Deployment-Role
          aws-region: us-west-2
      - run: |
          pip install --disable-pip-version-check fabric
          
          if [ "${{ matrix.service }}" != "front-end" ]; then
            echo "DEPLOY IMAGES FIRST!"
          fi
          fab --dry ${{ format('deploy-{0}', matrix.service ) }} --stack production