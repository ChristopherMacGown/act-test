name: CI
on:
  push:
jobs:
  lint:
    if: ${{ 1 == 2 }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast:  false
      matrix: 
        linter: ["ruff", "black", "prettier"]
    name: ${{ matrix.linter }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/mega-lint
        with:
          linter: ${{ matrix.linter }}
          action: check
  format:
    if: ${{ 1 == 2 }}
    uses: ./.github/workflows/format.yml
    secrets: inherit
    permissions:
      contents: write
  test:
    if: ${{ 1 == 2 }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        suite: 
          - name: python
            cache:
              path: .venv
              hash-pattern: "**/poetry.lock"
          - name: node
            cache:
              path: .front-end/node_modules/
              hash-pattern: "**/yarn.lock"
    name: ${{ matrix.suite.name }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/test-runner
        with:
          suite: ${{ matrix.suite.name }}
          cache-path: ${{ matrix.suite.cache.path }}
          cache-hash-pattern: ${{ matrix.suite.cache.hash-pattern }}
  prepare-build:
    runs-on: ubuntu-latest
    outputs:
      buildx: ${{ steps.builder.outputs.name }}
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
        id: builder
      - id: base-images
        uses: ./.github/actions/build-docker-image
        with:
          target: builder
          buildx: ${{ steps.builder.outputs.name }}
  build:
    needs: [prepare-build, format, test, lint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        artifact:
          - name: front-end
            kind: yarn
          - name: api
            kind: docker
          - name: bit-runner
            kind: docker
          - name: task-scheduler
            kind: docker
    name: ${{ matrix.artifact.name }}
    steps:
      - uses: actions/checkout@v3
      - if: ${{ matrix.artifact.kind == 'docker' }}
        uses: ./.github/workflows/build-docker-image.yml
        with:
          target: ${{ matrix.artifact.name }}
          buildx: ${{ needs.prepare-build.outputs.buildx }}
          latest-tag: ${{ github.branch == 'main' && 'latest' || format('staging_pr_{0}', github.run_id) }}
          repo: "emr.url.amazonaws.com/oreburgh/"